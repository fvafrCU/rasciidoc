NO COPY: inst/files/simple/src/sum.R:3:16: style: Opening curly braces should never go on their own line and should always be followed by a new line.
for (a_i in a) { # <3>
               ^
NO COPY: inst/runit_tests/runit-render.R:117:33: warning: no visible global function definition for ‘remove_dates’
                        spin <- remove_dates(readLines("spin.html"))
                                ^~~~~~~~~~~~
NO COPY: inst/runit_tests/runit-render.R:118:37: warning: no visible global function definition for ‘remove_dates’
                        ascii_md <- remove_dates(readLines("foo.html"))
                                    ^~~~~~~~~~~~
NO COPY: inst/runit_tests/runit-render.R:123:33: warning: no visible global function definition for ‘remove_dates’
                        knit <- remove_dates(readLines("knit.html"))
                                ^~~~~~~~~~~~
NO COPY: inst/runit_tests/runit-render.R:124:34: warning: no visible global function definition for ‘remove_dates’
                        ascii <- remove_dates(readLines("bar.html"))
                                 ^~~~~~~~~~~~
COPY: inst/runit_tests/runit-knitr_internals_mod.R:9:6: style: Commented code should be removed.
    ## ERROR in test_highlight_source: Error in if (res[n] == "\\normalsize") 
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
COPY: inst/runit_tests/runit-knitr_internals_mod.R:9:78: style: Trailing whitespace is superfluous.
    ## ERROR in test_highlight_source: Error in if (res[n] == "\\normalsize") 
                                                                             ^
COPY: inst/runit_tests/runit-knitr_internals_mod.R:10:6: style: Commented code should be removed.
    ##   res = res[-n] : 
     ^~~~~~~~~~~~~~~~~~~~
COPY: inst/runit_tests/runit-knitr_internals_mod.R:10:25: style: Trailing whitespace is superfluous.
    ##   res = res[-n] : 
                        ^
COPY: inst/runit_tests/runit-knitr_internals_mod.R:17:1: style: lines should not be more than 80 characters.
                                             list(highlight = TRUE, engine = "R",
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
COPY: inst/runit_tests/runit-knitr_internals_mod.R:22:1: style: lines should not be more than 80 characters.
                         paste("<span class=\"hl kwa\">if</span> <span class=\"hl",
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
COPY: inst/runit_tests/runit-knitr_internals_mod.R:32:1: style: lines should not be more than 80 characters.
                               "std\">(</span><span class=\"hl num\">4</span><span",
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
COPY: inst/runit_tests/runit-knitr_internals_mod.R:42:1: style: lines should not be more than 80 characters.
                                             list(highlight = FALSE, engine = "",
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
COPY: R/highr_internals.R:2:11: style: Use <-, not =, for assignment.
try_parse = function(code, silent = TRUE) {
          ^
COPY: R/highr_internals.R:4:68: style: Only use double-quotes.
    try(parse(text = code, keep.source = FALSE), silent = silent), 'try-error'
                                                                   ^~~~~~~~~~~
COPY: R/highr_internals.R:8:11: style: Use <-, not =, for assignment.
group_src = function(code) {
          ^
COPY: R/highr_internals.R:9:7: style: Place a space before left parenthesis, except in a function call.
  if ((n <- length(code)) < 1) return(list(code))
      ^
COPY: R/highr_internals.R:10:5: style: Use <-, not =, for assignment.
  i = i1 = i2 = 1
    ^
COPY: R/highr_internals.R:10:10: style: Use <-, not =, for assignment.
  i = i1 = i2 = 1
         ^
COPY: R/highr_internals.R:10:15: style: Use <-, not =, for assignment.
  i = i1 = i2 = 1
              ^
COPY: R/highr_internals.R:11:5: style: Use <-, not =, for assignment.
  x = list()
    ^
COPY: R/highr_internals.R:13:11: style: Use <-, not =, for assignment.
    piece = code[i1:i2]
          ^
COPY: R/highr_internals.R:15:14: style: Use <-, not =, for assignment.
      x[[i]] = piece; i = i + 1
             ^
COPY: R/highr_internals.R:15:25: style: Use <-, not =, for assignment.
      x[[i]] = piece; i = i + 1
                        ^
COPY: R/highr_internals.R:16:10: style: Use <-, not =, for assignment.
      i1 = i2 + 1 # start from the next line
         ^
COPY: R/highr_internals.R:18:8: style: Use <-, not =, for assignment.
    i2 = i2 + 1
       ^
COPY: R/highr_internals.R:24:14: style: Use <-, not =, for assignment.
escape_latex = function(x) {
             ^
COPY: R/highr_internals.R:25:5: style: Use <-, not =, for assignment.
  x = gsub('\\\\', '\\\\textbackslash', x)
    ^
COPY: R/highr_internals.R:25:12: style: Only use double-quotes.
  x = gsub('\\\\', '\\\\textbackslash', x)
           ^~~~~~
COPY: R/highr_internals.R:25:20: style: Only use double-quotes.
  x = gsub('\\\\', '\\\\textbackslash', x)
                   ^~~~~~~~~~~~~~~~~~~
COPY: R/highr_internals.R:25:21: warning: Do not use absolute paths.
  x = gsub('\\\\', '\\\\textbackslash', x)
                    ^~~~~~~~~~~~~~~~~
COPY: R/highr_internals.R:26:5: style: Use <-, not =, for assignment.
  x = gsub('([{}])', '\\\\\\1', x)
    ^
COPY: R/highr_internals.R:26:12: style: Only use double-quotes.
  x = gsub('([{}])', '\\\\\\1', x)
           ^~~~~~~~
COPY: R/highr_internals.R:26:22: style: Only use double-quotes.
  x = gsub('([{}])', '\\\\\\1', x)
                     ^~~~~~~~~
COPY: R/highr_internals.R:27:8: style: Only use double-quotes.
  gsub('\\\\textbackslash', '\\\\textbackslash{}', x)
       ^~~~~~~~~~~~~~~~~~~
COPY: R/highr_internals.R:27:9: warning: Do not use absolute paths.
  gsub('\\\\textbackslash', '\\\\textbackslash{}', x)
        ^~~~~~~~~~~~~~~~~
COPY: R/highr_internals.R:27:29: style: Only use double-quotes.
  gsub('\\\\textbackslash', '\\\\textbackslash{}', x)
                            ^~~~~~~~~~~~~~~~~~~~~
COPY: R/highr_internals.R:27:30: warning: Do not use absolute paths.
  gsub('\\\\textbackslash', '\\\\textbackslash{}', x)
                             ^~~~~~~~~~~~~~~~~~~
COPY: R/highr_internals.R:30:13: style: Use <-, not =, for assignment.
escape_html = function(x) {
            ^
COPY: R/highr_internals.R:31:5: style: Use <-, not =, for assignment.
  x = gsub('&', '&amp;', x)
    ^
COPY: R/highr_internals.R:31:12: style: Only use double-quotes.
  x = gsub('&', '&amp;', x)
           ^~~
COPY: R/highr_internals.R:31:17: style: Only use double-quotes.
  x = gsub('&', '&amp;', x)
                ^~~~~~~
COPY: R/highr_internals.R:32:5: style: Use <-, not =, for assignment.
  x = gsub('<', '&lt;', x)
    ^
COPY: R/highr_internals.R:32:12: style: Only use double-quotes.
  x = gsub('<', '&lt;', x)
           ^~~
COPY: R/highr_internals.R:32:17: style: Only use double-quotes.
  x = gsub('<', '&lt;', x)
                ^~~~~~
COPY: R/highr_internals.R:33:5: style: Use <-, not =, for assignment.
  x = gsub('>', '&gt;', x)
    ^
COPY: R/highr_internals.R:33:12: style: Only use double-quotes.
  x = gsub('>', '&gt;', x)
           ^~~
COPY: R/highr_internals.R:33:17: style: Only use double-quotes.
  x = gsub('>', '&gt;', x)
                ^~~~~~
COPY: R/highr_internals.R:34:5: style: Use <-, not =, for assignment.
  x = gsub('"', '&quot;', x)
    ^
COPY: R/highr_internals.R:34:17: style: Only use double-quotes.
  x = gsub('"', '&quot;', x)
                ^~~~~~~~
COPY: R/highr_internals.R:37:1: style: Trailing blank lines are superfluous.

^
COPY: R/knitr_internals_mod.R:3:12: style: Use <-, not =, for assignment.
set_header = function(...) {
           ^
COPY: R/knitr_internals_mod.R:4:67: style: Only use double-quotes.
    knitr::opts_knit$set(header = merge_list(knitr::opts_knit$get('header'), 
                                                                  ^~~~~~~~
COPY: R/knitr_internals_mod.R:4:77: style: Trailing whitespace is superfluous.
    knitr::opts_knit$set(header = merge_list(knitr::opts_knit$get('header'), 
                                                                            ^
COPY: R/knitr_internals_mod.R:12:16: style: Use <-, not =, for assignment.
hilight_source = function(x, format, options) {
               ^
COPY: R/knitr_internals_mod.R:13:7: style: Place a space before left parenthesis, except in a function call.
  if ((format %in% c('latex', 'html')) && options$highlight) {
      ^
COPY: R/knitr_internals_mod.R:13:22: style: Only use double-quotes.
  if ((format %in% c('latex', 'html')) && options$highlight) {
                     ^~~~~~~
COPY: R/knitr_internals_mod.R:13:31: style: Only use double-quotes.
  if ((format %in% c('latex', 'html')) && options$highlight) {
                              ^~~~~~
COPY: R/knitr_internals_mod.R:14:27: style: Only use double-quotes.
    if (options$engine == 'R') {
                          ^~~
COPY: R/knitr_internals_mod.R:15:12: style: Use <-, not =, for assignment.
      opts = knitr::opts_knit$get('highr.opts')
           ^
COPY: R/knitr_internals_mod.R:15:35: style: Only use double-quotes.
      opts = knitr::opts_knit$get('highr.opts')
                                  ^~~~~~~~~~~~
COPY: R/knitr_internals_mod.R:18:11: style: Use <-, not =, for assignment.
      res = try(highr::hi_andre(x, options$engine, format))
          ^
COPY: R/knitr_internals_mod.R:19:25: style: Only use double-quotes.
      if (inherits(res, 'try-error')) {
                        ^~~~~~~~~~~
COPY: R/knitr_internals_mod.R:20:23: style: Only use double-quotes.
        if (format == 'html') escape_html(x) else escape_latex(x)
                      ^~~~~~
COPY: R/knitr_internals_mod.R:23:11: style: Use <-, not =, for assignment.
        n = length(res)
          ^
COPY: R/knitr_internals_mod.R:25:23: style: Only use double-quotes.
        if (res[n] == '\\normalsize') res = res[-n]
                      ^~~~~~~~~~~~~~
COPY: R/knitr_internals_mod.R:25:43: style: Use <-, not =, for assignment.
        if (res[n] == '\\normalsize') res = res[-n]
                                          ^
COPY: R/knitr_internals_mod.R:32:27: style: Only use double-quotes.
    if (options$engine == 'R' && !options$tidy && isFALSE(options$eval))
                          ^~~
COPY: R/knitr_internals_mod.R:33:9: style: Use <-, not =, for assignment.
      x = vapply(group_src(x), paste, character(1), collapse = '\n')
        ^
COPY: R/knitr_internals_mod.R:33:64: style: Only use double-quotes.
      x = vapply(group_src(x), paste, character(1), collapse = '\n')
                                                               ^~~~
COPY: R/knitr_internals_mod.R:61:74: style: Trailing whitespace is superfluous.
    # Verbatim copy of a part of knitr::render_asciidoc() version 1.18.7, 
                                                                         ^
COPY: R/knitr_internals_mod.R:65:66: style: Trailing whitespace is superfluous.
        x <- paste(c(hilight_source(x, "asciidoc", options), ""), 
                                                                 ^
COPY: R/knitr_internals_mod.R:67:74: style: Trailing whitespace is superfluous.
        sprintf("\n[source,%s]\n----\n%s----\n", tolower(options$engine), 
                                                                         ^
COPY: R/knitr_internals_mod.R:71:56: style: Trailing whitespace is superfluous.
        sprintf("\n[NOTE]\n====\n.Message\n%s\n====\n", 
                                                       ^
COPY: R/knitr_internals_mod.R:79:57: style: Trailing whitespace is superfluous.
        sprintf("\n[CAUTION]\n====\n.Error\n%s\n====\n", 
                                                        ^
COPY: R/knitr_internals_mod.R:88:10: style: Trailing whitespace is superfluous.
        } 
         ^
COPY: R/knitr_internals_mod.R:90:77: style: Trailing whitespace is superfluous.
    res <- knitr::knit_hooks$set(source = hook.source, output = hook.output, 
                                                                            ^
COPY: R/knitr_internals_mod.R:92:53: style: Trailing whitespace is superfluous.
                                 error = hook.error, 
                                                    ^
COPY: R/knitr_internals.R:2:12: style: Use <-, not =, for assignment.
merge_list = function(x, y) {
           ^
COPY: R/knitr_internals.R:3:15: style: Use <-, not =, for assignment.
  x[names(y)] = y
              ^
COPY: R/knitr_internals.R:7:13: style: Use <-, not =, for assignment.
line_prompt = function(x, prompt = getOption('prompt'), 
            ^
COPY: R/knitr_internals.R:7:46: style: Only use double-quotes.
line_prompt = function(x, prompt = getOption('prompt'), 
                                             ^~~~~~~~
COPY: R/knitr_internals.R:7:56: style: Trailing whitespace is superfluous.
line_prompt = function(x, prompt = getOption('prompt'), 
                                                       ^
COPY: R/knitr_internals.R:8:45: style: Only use double-quotes.
                       continue = getOption('continue')) {
                                            ^~~~~~~~~~
COPY: R/knitr_internals.R:10:23: style: Only use double-quotes.
  paste0(prompt, gsub('(?<=\n)(?=.|\n)', continue, x, perl = TRUE))
                      ^~~~~~~~~~~~~~~~~
COPY: R/knitr_internals.R:13:9: style: Use <-, not =, for assignment.
isFALSE = function(x) identical(x, FALSE)
        ^
COPY: R/knitr_internals.R:15:16: style: Use <-, not =, for assignment.
comment_length = function(x) {
               ^
COPY: R/knitr_internals.R:19:18: style: Use <-, not =, for assignment.
highlight_header = function() {
                 ^
COPY: R/knitr_internals.R:21:13: style: Only use double-quotes.
    sprintf('\\let\\hl%s\\hlstd', c('esc', 'pps', 'lin')),
            ^~~~~~~~~~~~~~~~~~~~
COPY: R/knitr_internals.R:21:37: style: Only use double-quotes.
    sprintf('\\let\\hl%s\\hlstd', c('esc', 'pps', 'lin')),
                                    ^~~~~
COPY: R/knitr_internals.R:21:44: style: Only use double-quotes.
    sprintf('\\let\\hl%s\\hlstd', c('esc', 'pps', 'lin')),
                                           ^~~~~
COPY: R/knitr_internals.R:21:51: style: Only use double-quotes.
    sprintf('\\let\\hl%s\\hlstd', c('esc', 'pps', 'lin')),
                                                  ^~~~~
COPY: R/knitr_internals.R:22:13: style: Only use double-quotes.
    sprintf('\\let\\hl%s\\hlcom', c('slc', 'ppc'))
            ^~~~~~~~~~~~~~~~~~~~
COPY: R/knitr_internals.R:22:37: style: Only use double-quotes.
    sprintf('\\let\\hl%s\\hlcom', c('slc', 'ppc'))
                                    ^~~~~
COPY: R/knitr_internals.R:22:44: style: Only use double-quotes.
    sprintf('\\let\\hl%s\\hlcom', c('slc', 'ppc'))
                                           ^~~~~
COPY: R/knitr_internals.R:23:17: style: Only use double-quotes.
  ), collapse = ' '))
                ^~~
COPY: R/knitr_internals.R:25:1: style: Trailing blank lines are superfluous.

^
Warning message:
In normalizePath(file.path(path, names(settings$exclusions))) :
  path[1]="/home/nik/git/cs/fvafrcu/rasciidoc/inst/files/simple/spin.R": No such file or directory
